===============================================================================
                          AURENNA AI - SERVICES DOCUMENTATION
===============================================================================

OVERVIEW:
The Aurenna AI Tarot Reading application utilizes a modular service architecture 
to handle authentication, tarot card operations, and database management. This 
document provides a comprehensive analysis of all services in the application.

===============================================================================
                                 1. AUTH SERVICE
===============================================================================

FILE: lib/services/auth_service.dart
CLASS: AuthService extends ChangeNotifier

DESCRIPTION:
Handles all user authentication, user state management, and subscription 
verification. Integrates with Supabase for backend authentication and user 
data management.

KEY FEATURES:
✅ User Registration & Login
✅ Password Reset
✅ Session Management  
✅ Free Questions Tracking
✅ Premium Subscription Verification
✅ Real-time State Updates (ChangeNotifier)
✅ Memory Caching for Performance
✅ Disposal Safety (prevents memory leaks)

CORE METHODS:

Authentication:
- signUp(email, password) → AuthResponse
  * Creates new user account
  * Automatically triggers database user profile creation
  * Notifies listeners on success

- signIn(email, password) → AuthResponse  
  * Authenticates existing user
  * Updates listener state on success

- signOut() → void
  * Signs out current user
  * Clears session and notifies listeners

- resetPassword(email) → void
  * Sends password reset email
  * Uses deep link redirect for mobile app

User Data Management:
- getFreeQuestionsRemaining() → Future<int>
  * Retrieves user's remaining free questions
  * Implements intelligent caching
  * Auto-updates cache and notifies on changes
  * Graceful fallback to cached value on error

- refreshQuestionCount() → Future<void>
  * Forces cache invalidation and refresh
  * Called on app resume/focus

- hasActiveSubscription() → Future<bool>
  * Checks for 'paypal_active' or 'google_pay_active' status
  * Caches result for performance
  * Notifies listeners on status change

State Management:
- currentUser → User? (getter)
- currentSession → Session? (getter)
- Intelligent caching with _cachedQuestionCount, _cachedSubscriptionStatus
- Safe disposal handling to prevent crashes

INTEGRATION POINTS:
- Supabase Authentication
- User profiles database table
- Reading history access control
- Premium feature gating

===============================================================================
                                2. TAROT SERVICE  
===============================================================================

FILE: lib/services/tarot_service.dart
CLASS: TarotService (static utility class)

DESCRIPTION:
Core business logic for tarot readings. Handles card drawing, AI reading 
generation, database operations, and supports multiple reading types with 
unique spreads and interpretations.

KEY FEATURES:
✅ Multiple Reading Types (9 different spreads)
✅ AI-Powered Reading Generation (OpenAI integration)
✅ Intelligent Card Drawing with Randomization
✅ Database Reading Storage & Retrieval
✅ Batch Operations for Performance
✅ Reading History Management
✅ Premium vs Free Reading Logic
✅ Error Handling & Diagnostics

READING TYPES SUPPORTED:

1. THREE-CARD READING (Free)
   - Cards: 3 (Past, Present, Future)
   - Method: drawThreeCards()
   - Target: General questions
   - AI: Basic tarot interpretation

2. COMPREHENSIVE GENERAL READING (Premium)
   - Cards: 12 (Mind, Body, Spirit, Family, etc.)
   - Method: drawTwelveCards()
   - Target: Life overview
   - AI: Detailed life analysis

3. LOVE COMPATIBILITY READING (Premium)
   - Cards: 5 (Your Feelings, Partner's Feelings, Challenges, etc.)
   - Method: drawFiveCards()
   - Target: Relationship compatibility
   - AI: Romantic connection analysis

4. SITUATIONSHIP READING (Premium)
   - Cards: 6 (Your Energy, Their Feelings, Thoughts, etc.)
   - Method: drawSixCards()
   - Target: Undefined relationships
   - AI: Relationship clarity guidance

5. YES OR NO READING (Premium)
   - Cards: 3 (Initial Energy, Core Message, Final Verdict)
   - Method: drawThreeCardsForYesOrNo()
   - Target: Direct answers
   - AI: Clear yes/no interpretation

6. PAST LIFE READING (Premium)
   - Cards: 11 (Who You Were, Gender, Childhood, etc.)
   - Method: drawElevenCards()
   - Target: Soul journey exploration
   - AI: Past incarnation narrative

7. RELATIONSHIP DECISION READING (Premium)
   - Cards: 4 (Current State, Stay Reasons, Leave Reasons, Advice)
   - Method: drawFourCardsForDecision()
   - Target: Relationship crossroads
   - AI: Decision-making guidance

8. CAREER READING (Premium)
   - Cards: 5 (Current Situation, Progress, Challenges, Opportunities, Future)
   - Method: drawFiveCardsForCareer()
   - Target: Professional guidance
   - AI: "Brutally honest bestie" career advice

9. CAREER CHANGE READING (Premium)
   - Cards: 3 (Current Situation, Action to Take, Potential Outcome)
   - Method: drawThreeCardsForCareerChange()
   - Target: Career transitions
   - AI: Transformation roadmap

CORE CARD DRAWING LOGIC:
- Uses complete 78-card tarot deck
- Shuffles deck for randomization
- 50% chance of reversed orientation per card
- Ensures unique cards per reading
- Position-based card meanings
- Type-specific spreads

AI INTEGRATION:
- OpenAI GPT integration for reading generation
- Custom prompts for each reading type
- Personality: "Aurenna" - mystic, truth-bomber, bestie
- Tone: Honest, supportive, specific guidance
- Error handling for API failures
- Rate limiting and timeout management

Database Operations:
- saveReading() → Stores readings with user association
- getUserReadings() → Retrieves user's reading history
- deleteReading() → Single reading deletion
- batchDeleteReadings() → Bulk deletion with parallel processing
- deleteReadingFast() → Optimized single deletion

Performance Features:
- Batch operations for multiple deletions
- Parallel processing for bulk operations  
- Fallback strategies for failed operations
- Database permission testing
- RLS (Row Level Security) diagnostics

PROMPT ENGINEERING:
Each reading type has specialized AI prompts:
- Personality-driven responses
- Context-aware interpretations
- Reading type-specific formatting
- Cultural sensitivity
- Safety guidelines for sensitive topics

ERROR HANDLING:
- API failure graceful degradation
- Database operation retries
- Permission diagnostics
- User-friendly error messages
- Logging for debugging

===============================================================================
                              3. SUPABASE SERVICE
===============================================================================

FILE: lib/services/supabase_service.dart
STATUS: Empty file (legacy/placeholder)

DESCRIPTION:
This file appears to be empty or a legacy placeholder. All Supabase operations 
are currently handled directly through the SupabaseConfig and integrated into 
AuthService and TarotService.

ACTUAL SUPABASE INTEGRATION:
- Configuration: lib/config/supabase.dart
- Authentication: Handled in AuthService
- Database: Handled in TarotService
- Real-time: Not currently implemented

===============================================================================
                             SERVICE ARCHITECTURE
===============================================================================

DESIGN PATTERNS USED:

1. Service Locator Pattern
   - Services accessed statically or through Provider
   - Centralized service management

2. Observer Pattern
   - AuthService extends ChangeNotifier
   - UI rebuilds on authentication state changes

3. Repository Pattern
   - TarotService acts as repository for readings
   - Abstracts database operations

4. Factory Pattern
   - Card drawing methods create configured DrawnCard objects
   - Reading type-specific factories

DEPENDENCIES:

External:
- supabase_flutter: Backend as a Service
- http: OpenAI API communication  
- provider: State management
- uuid: Unique ID generation

Internal:
- config/: Configuration files
- models/: Data models
- data/: Static tarot deck data

SECURITY CONSIDERATIONS:

Authentication:
✅ Secure password handling
✅ Session management
✅ Auto-logout on session expiry
✅ Email verification

Authorization:
✅ Premium feature gating
✅ User-specific data access
✅ Row Level Security (RLS) in database
✅ API key protection

Data Protection:
✅ User data encryption in transit
✅ Secure API communication
✅ Input validation
✅ SQL injection prevention (Supabase ORM)

===============================================================================
                            PERFORMANCE OPTIMIZATIONS
===============================================================================

CACHING STRATEGIES:
- AuthService: Caches question count and subscription status
- Reduces database calls
- Intelligent cache invalidation
- Memory-efficient caching

ASYNC OPERATIONS:
- All database operations are async
- Non-blocking UI operations
- Progressive loading states
- Error recovery mechanisms

BATCH OPERATIONS:
- Bulk reading deletions
- Parallel processing for multiple operations
- Fallback to individual operations if batch fails

MEMORY MANAGEMENT:
- Proper disposal of services
- Prevention of memory leaks
- Safe listener notification patterns

===============================================================================
                               INTEGRATION FLOW
===============================================================================

USER REGISTRATION/LOGIN:
1. User enters credentials → AuthService.signIn()
2. Supabase authenticates → User object created
3. Database trigger creates user profile
4. AuthService notifies listeners → UI updates
5. Question count and subscription loaded

READING GENERATION:
1. User selects reading type → Appropriate draw method called
2. Cards drawn with randomization → DrawnCard objects created
3. AI prompt built → OpenAI API called
4. Reading generated → Database storage
5. Results displayed → User can share

PREMIUM VERIFICATION:
1. User attempts premium feature → hasActiveSubscription() called
2. Database queried for subscription status
3. Result cached → UI updated accordingly
4. Access granted or upgrade prompt shown

===============================================================================
                                  FUTURE ENHANCEMENTS
===============================================================================

POTENTIAL IMPROVEMENTS:

1. Service Enhancements:
   - Real-time reading sharing
   - Push notifications for daily readings
   - Offline reading capability
   - Reading analytics service

2. AI Improvements:
   - Multi-language support
   - Personalized reading styles
   - Learning from user feedback
   - Voice reading generation

3. Performance:
   - Service Worker for caching
   - Background reading pre-generation
   - Image optimization service
   - CDN integration

4. Features:
   - Social sharing service
   - Reading scheduling service
   - Tarot learning service
   - Community features service

===============================================================================
                                   CONCLUSION
===============================================================================

The Aurenna AI service architecture is well-designed with clear separation of 
concerns, robust error handling, and scalable patterns. The services provide 
a solid foundation for a premium tarot reading application with room for future 
enhancements and feature additions.

Key Strengths:
✅ Clean architecture with separated concerns
✅ Comprehensive error handling
✅ Performance optimizations
✅ Security best practices
✅ Extensible design for new reading types
✅ Robust state management

The modular design allows for easy testing, maintenance, and feature additions 
while maintaining high code quality and user experience standards.

===============================================================================
Generated: $(date)
Author: AI Analysis of Aurenna AI Codebase
Version: 1.0
===============================================================================