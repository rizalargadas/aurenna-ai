===============================================================================
                          AURENNA AI - SERVICES DOCUMENTATION
===============================================================================

OVERVIEW:
The Aurenna AI Tarot Reading application utilizes a modular service architecture 
to handle authentication, tarot card operations, payment processing, error handling,
and database management. This document provides a comprehensive analysis of all 
services in the application.

===============================================================================
                                 1. AUTH SERVICE
===============================================================================

FILE: lib/services/auth_service.dart
CLASS: AuthService extends ChangeNotifier

DESCRIPTION:
Handles all user authentication, user state management, and subscription 
verification. Integrates with Supabase for backend authentication and user 
data management.

KEY FEATURES:
✅ User Registration & Login
✅ Password Reset
✅ Session Management  
✅ Free Questions Tracking
✅ Premium Subscription Verification
✅ Real-time State Updates (ChangeNotifier)
✅ Memory Caching for Performance
✅ Disposal Safety (prevents memory leaks)

CORE METHODS:

Authentication:
- signUp(email, password) → AuthResponse
  * Creates new user account
  * Automatically triggers database user profile creation
  * Notifies listeners on success

- signIn(email, password) → AuthResponse  
  * Authenticates existing user
  * Updates listener state on success

- signOut() → void
  * Signs out current user
  * Clears session and notifies listeners

- resetPassword(email) → void
  * Sends password reset email
  * Uses deep link redirect for mobile app

User Data Management:
- getFreeQuestionsRemaining() → Future<int>
  * Retrieves user's remaining free questions
  * Implements intelligent caching
  * Auto-updates cache and notifies on changes
  * Graceful fallback to cached value on error

- refreshQuestionCount() → Future<void>
  * Forces cache invalidation and refresh
  * Called on app resume/focus

- hasActiveSubscription() → Future<bool>
  * Checks for 'paypal_active' or 'google_pay_active' status
  * Caches result for performance
  * Notifies listeners on status change

State Management:
- currentUser → User? (getter)
- currentSession → Session? (getter)
- Intelligent caching with _cachedQuestionCount, _cachedSubscriptionStatus
- Safe disposal handling to prevent crashes

INTEGRATION POINTS:
- Supabase Authentication
- User profiles database table
- Reading history access control
- Premium feature gating

===============================================================================
                                2. TAROT SERVICE  
===============================================================================

FILE: lib/services/tarot_service.dart
CLASS: TarotService (static utility class)

DESCRIPTION:
Core business logic for tarot readings. Handles card drawing, AI reading 
generation, database operations, and supports multiple reading types with 
unique spreads and interpretations. Recently updated with inclusive ethical 
guidelines for all reading prompts.

KEY FEATURES:
✅ Multiple Reading Types (10 different spreads)
✅ AI-Powered Reading Generation (OpenAI integration)
✅ Intelligent Card Drawing with Randomization
✅ Database Reading Storage & Retrieval
✅ Batch Operations for Performance
✅ Reading History Management
✅ Premium vs Free Reading Logic
✅ Error Handling & Diagnostics
✅ Inclusive Ethical Guidelines

READING TYPES SUPPORTED:

1. THREE-CARD READING (Free)
   - Cards: 3 (Past, Present, Future)
   - Method: drawThreeCards()
   - Target: General questions
   - AI: Basic tarot interpretation

2. COMPREHENSIVE GENERAL READING (Premium)
   - Cards: 12 (Mind, Body, Spirit, Family, etc.)
   - Method: drawTwelveCards()
   - Target: Life overview
   - AI: Detailed life analysis

3. LOVE COMPATIBILITY READING (Premium)
   - Cards: 5 (Your Feelings, Partner's Feelings, Challenges, etc.)
   - Method: drawFiveCards()
   - Target: Relationship compatibility
   - AI: Romantic connection analysis

4. SITUATIONSHIP READING (Premium)
   - Cards: 6 (Your Energy, Their Feelings, Thoughts, etc.)
   - Method: drawSixCards()
   - Target: Undefined relationships
   - AI: Relationship clarity guidance

5. YES OR NO READING (Premium)
   - Cards: 3 (Initial Energy, Core Message, Final Verdict)
   - Method: drawThreeCardsForYesOrNo()
   - Target: Direct answers
   - AI: Clear yes/no interpretation

6. PAST LIFE READING (Premium)
   - Cards: 11 (Who You Were, Gender, Childhood, etc.)
   - Method: drawElevenCards()
   - Target: Soul journey exploration
   - AI: Past incarnation narrative

7. RELATIONSHIP DECISION READING (Premium)
   - Cards: 4 (Current State, Stay Reasons, Leave Reasons, Advice)
   - Method: drawFourCardsForDecision()
   - Target: Relationship crossroads
   - AI: Decision-making guidance

8. CAREER READING (Premium)
   - Cards: 5 (Current Situation, Progress, Challenges, Opportunities, Future)
   - Method: drawFiveCardsForCareer()
   - Target: Professional guidance
   - AI: "Brutally honest bestie" career advice

9. CAREER CHANGE READING (Premium)
   - Cards: 3 (Current Situation, Action to Take, Potential Outcome)
   - Method: drawThreeCardsForCareerChange()
   - Target: Career transitions
   - AI: Transformation roadmap

10. CARD OF THE DAY (Free with daily limit)
    - Cards: 1 (Daily guidance card)
    - Method: drawCardOfTheDay()
    - Target: Daily inspiration
    - AI: Personal daily guidance
    - Special: Once per day limit enforced


CORE CARD DRAWING LOGIC:
- Uses complete 78-card tarot deck
- Shuffles deck for randomization
- 50% chance of reversed orientation per card
- Ensures unique cards per reading
- Position-based card meanings
- Type-specific spreads

AI INTEGRATION:
- OpenAI GPT integration for reading generation
- Custom prompts for each reading type
- Personality: "Aurenna" - mystic, truth-bomber, bestie
- Tone: Honest, supportive, specific guidance
- Error handling for API failures
- Rate limiting and timeout management
- Ethical guidelines: Inclusive, respectful, no derogatory content

ETHICAL & SAFETY RULES (Recently Updated):
- Respect all individuals: No derogatory references to LGBTQ+ communities
- No racist content
- Maintains respectful and inclusive environment
- Handles sensitive topics with care
- Provides supportive guidance for difficult situations

Database Operations:
- saveReading() → Stores readings with user association
- getUserReadings() → Retrieves user's reading history
- deleteReading() → Single reading deletion
- batchDeleteReadings() → Bulk deletion with parallel processing
- deleteReadingFast() → Optimized single deletion

Performance Features:
- Batch operations for multiple deletions
- Parallel processing for bulk operations  
- Fallback strategies for failed operations
- Database permission testing
- RLS (Row Level Security) diagnostics

PROMPT ENGINEERING:
Each reading type has specialized AI prompts:
- Personality-driven responses
- Context-aware interpretations
- Reading type-specific formatting
- Cultural sensitivity
- Safety guidelines for sensitive topics
- Inclusive language requirements

ERROR HANDLING:
- API failure graceful degradation
- Database operation retries
- Permission diagnostics
- User-friendly error messages
- Logging for debugging

===============================================================================
                             3. PAYPAL SERVICE
===============================================================================

FILE: lib/services/paypal_service.dart
CLASS: PayPalService (Singleton)

DESCRIPTION:
Handles all payment processing through PayPal, including subscription management,
coupon validation, and multi-tier pricing. Supports both sandbox and production
environments.

KEY FEATURES:
✅ PayPal Payment Integration
✅ Multi-tier Subscription Plans (Monthly, Quarterly, Yearly)
✅ Universal Coupon System
✅ Sandbox/Production Environment Support
✅ Subscription Status Management
✅ Coupon Usage Tracking
✅ Price Calculation with Discounts

SUBSCRIPTION TIERS:
1. Monthly Plan
   - Price: $6.99/month
   - Duration: 30 days
   - Plan ID: premium_monthly

2. Quarterly Plan
   - Price: $17.99 (3 months)
   - Duration: 90 days
   - Savings: 14% off monthly rate
   - Plan ID: premium_quarterly

3. Yearly Plan
   - Price: $59.99 (12 months)
   - Duration: 365 days
   - Savings: 28% off monthly rate
   - Plan ID: premium_yearly

COUPON SYSTEM:
Predefined Coupon Codes:
- WELCOME50: 50% off (one-time use)
- AURENNA20: 20% off (unlimited)
- AURENNA90: 90% off (unlimited)
- AURENNA99: 99% off (unlimited)
- FRIEND30: 30% friend referral (one-time use)
- BETA100: 100% free for beta testers (one-time use)

Features:
- Automatic expiration checking
- Usage tracking per user
- Percentage-based discounts
- Support for 100% discounts (free subscriptions)

CORE METHODS:
- validateCoupon(code, planPrice) → CouponDetails
  * Validates coupon code
  * Checks expiration date
  * Verifies usage limits
  * Calculates discount amount

- startSubscription(context, couponCode, selectedPlan) → Future<bool>
  * Initiates PayPal payment flow
  * Applies coupon discounts
  * Handles free subscriptions (100% discount)
  * Updates database on success

- Configuration via environment variables:
  * PAYPAL_CLIENT_ID
  * PAYPAL_SECRET_KEY
  * PAYPAL_ENVIRONMENT (sandbox/production)

INTEGRATION POINTS:
- PayPal Payment Gateway
- Supabase for subscription tracking
- Coupon usage database table
- User profiles for subscription status

===============================================================================
                            4. ERROR HANDLER SERVICE
===============================================================================

FILE: lib/services/error_handler.dart
CLASS: ErrorHandler (static utility class)

DESCRIPTION:
Provides user-friendly error message conversion and error categorization.
Transforms technical errors into friendly, personality-driven messages that
align with Aurenna's mystical theme.

KEY FEATURES:
✅ Network Error Detection
✅ User-Friendly Message Conversion
✅ Error Categorization
✅ Personality-Driven Error Messages
✅ Context-Aware Error Handling

ERROR CATEGORIES HANDLED:

Network/Connection Errors:
- SocketException
- Failed host lookup
- Network unreachable
- Connection refused
- Returns: "📱 Looks like you're offline, bestie!"

Timeout Errors:
- Connection timeout
- Request timeout
- Returns: "⏰ The universe is taking its sweet time..."

Authentication Errors:
- 401 Unauthorized
- Returns: "🔐 Oops! There's an authentication hiccup."

Rate Limiting:
- 429 Too Many Requests
- Returns: "🚦 Whoa there, speed demon!"

Server Errors:
- 500, 502, 503 Server errors
- Returns: "🌩️ The cosmic servers are having a moment..."

API Errors:
- OpenAI API failures
- Returns: "✨ The AI spirits are temporarily unavailable..."

Database Errors:
- Supabase connection issues
- Returns: "📚 Our cosmic library is having a moment..."

Daily Limit Errors:
- Daily card already drawn
- Returns: "🌅 You've already pulled your daily cosmic wisdom!"

CORE METHODS:
- getUserFriendlyMessage(error) → String
  * Converts technical errors to friendly messages
  * Maintains Aurenna's personality in error messages

- isNetworkError(error) → bool
  * Detects if error is network-related
  * Used for offline mode handling

- getErrorTitle(error) → String
  * Provides short, descriptive error titles
  * Used in error dialog headers

===============================================================================
                              5. SUPABASE SERVICE
===============================================================================

FILE: lib/services/supabase_service.dart
STATUS: Empty file (legacy/placeholder)

DESCRIPTION:
This file appears to be empty or a legacy placeholder. All Supabase operations 
are currently handled directly through the SupabaseConfig and integrated into 
AuthService and TarotService.

ACTUAL SUPABASE INTEGRATION:
- Configuration: lib/config/supabase.dart
- Authentication: Handled in AuthService
- Database: Handled in TarotService
- Real-time: Not currently implemented

===============================================================================
                             SERVICE ARCHITECTURE
===============================================================================

DESIGN PATTERNS USED:

1. Service Locator Pattern
   - Services accessed statically or through Provider
   - Centralized service management

2. Observer Pattern
   - AuthService extends ChangeNotifier
   - UI rebuilds on authentication state changes

3. Repository Pattern
   - TarotService acts as repository for readings
   - Abstracts database operations

4. Factory Pattern
   - Card drawing methods create configured DrawnCard objects
   - Reading type-specific factories

5. Singleton Pattern
   - PayPalService uses singleton for payment processing
   - Ensures single instance for payment flow

DEPENDENCIES:

External:
- supabase_flutter: Backend as a Service
- http: OpenAI API communication  
- provider: State management
- uuid: Unique ID generation
- flutter_paypal_payment: PayPal integration
- flutter_dotenv: Environment configuration

Internal:
- config/: Configuration files
- models/: Data models
- data/: Static tarot deck data

SECURITY CONSIDERATIONS:

Authentication:
✅ Secure password handling
✅ Session management
✅ Auto-logout on session expiry
✅ Email verification

Authorization:
✅ Premium feature gating
✅ User-specific data access
✅ Row Level Security (RLS) in database
✅ API key protection

Data Protection:
✅ User data encryption in transit
✅ Secure API communication
✅ Input validation
✅ SQL injection prevention (Supabase ORM)

Payment Security:
✅ PayPal secure payment processing
✅ No credit card data stored locally
✅ Environment-based configuration
✅ Coupon validation and tracking

Content Safety:
✅ Ethical guidelines enforcement
✅ Inclusive language requirements
✅ Respectful content generation
✅ Sensitive topic handling

===============================================================================
                            PERFORMANCE OPTIMIZATIONS
===============================================================================

CACHING STRATEGIES:
- AuthService: Caches question count and subscription status
- Reduces database calls
- Intelligent cache invalidation
- Memory-efficient caching

ASYNC OPERATIONS:
- All database operations are async
- Non-blocking UI operations
- Progressive loading states
- Error recovery mechanisms

BATCH OPERATIONS:
- Bulk reading deletions
- Parallel processing for multiple operations
- Fallback to individual operations if batch fails

MEMORY MANAGEMENT:
- Proper disposal of services
- Prevention of memory leaks
- Safe listener notification patterns

===============================================================================
                               INTEGRATION FLOW
===============================================================================

USER REGISTRATION/LOGIN:
1. User enters credentials → AuthService.signIn()
2. Supabase authenticates → User object created
3. Database trigger creates user profile
4. AuthService notifies listeners → UI updates
5. Question count and subscription loaded

READING GENERATION:
1. User selects reading type → Appropriate draw method called
2. Cards drawn with randomization → DrawnCard objects created
3. AI prompt built with ethical guidelines → OpenAI API called
4. Reading generated → Database storage
5. Results displayed → User can share

PREMIUM SUBSCRIPTION FLOW:
1. User selects subscription plan → PayPalService.startSubscription()
2. Coupon validated if provided → Discount applied
3. PayPal payment initiated → User completes payment
4. Subscription status updated → Database record created
5. Premium features unlocked → AuthService notified

PREMIUM VERIFICATION:
1. User attempts premium feature → hasActiveSubscription() called
2. Database queried for subscription status
3. Result cached → UI updated accordingly
4. Access granted or upgrade prompt shown

ERROR HANDLING FLOW:
1. Error occurs → ErrorHandler processes
2. Error type identified → User-friendly message generated
3. Appropriate UI response → Toast, dialog, or inline message
4. Recovery options provided → Retry or alternative actions

===============================================================================
                            RECENT UPDATES
===============================================================================

JANUARY 2025 UPDATES:

1. Ethical Guidelines Implementation:
   - Added inclusive language requirements to all tarot spreads
   - No derogatory LGBTQ+ references
   - No racist content
   - Respectful and inclusive environment maintained

2. Multi-Tier Subscription System:
   - Monthly, Quarterly, and Yearly plans
   - Tiered pricing with savings incentives
   - Universal coupon support across all plans

3. Enhanced Error Handling:
   - Personality-driven error messages
   - Better network error detection
   - Context-aware error responses

4. PayPal Integration:
   - Simplified payment flow
   - Support for 100% discount coupons
   - Sandbox/Production environment switching

===============================================================================
                              FUTURE ENHANCEMENTS
===============================================================================

POTENTIAL IMPROVEMENTS:

1. Service Enhancements:
   - Real-time reading sharing
   - Push notifications for daily readings
   - Offline reading capability
   - Reading analytics service
   - WebSocket integration for live features

2. AI Improvements:
   - Multi-language support
   - Personalized reading styles
   - Learning from user feedback
   - Voice reading generation
   - Enhanced context awareness

3. Performance:
   - Service Worker for caching
   - Background reading pre-generation
   - Image optimization service
   - CDN integration
   - Lazy loading optimizations

4. Features:
   - Social sharing service
   - Reading scheduling service
   - Tarot learning service
   - Community features service
   - Reading recommendations engine

5. Payment Enhancements:
   - Additional payment methods
   - Subscription pausing
   - Gift subscriptions
   - Referral program integration
   - Dynamic pricing

===============================================================================
                                   CONCLUSION
===============================================================================

The Aurenna AI service architecture is well-designed with clear separation of 
concerns, robust error handling, and scalable patterns. The services provide 
a solid foundation for a premium tarot reading application with room for future 
enhancements and feature additions.

Key Strengths:
✅ Clean architecture with separated concerns
✅ Comprehensive error handling with personality
✅ Performance optimizations
✅ Security best practices
✅ Extensible design for new reading types
✅ Robust state management
✅ Inclusive and ethical content generation
✅ Multi-tier subscription system
✅ User-friendly error messages

The modular design allows for easy testing, maintenance, and feature additions 
while maintaining high code quality and user experience standards. Recent updates
have focused on inclusivity, subscription flexibility, and enhanced user experience.

===============================================================================
Generated: January 2025
Author: AI Analysis of Aurenna AI Codebase
Version: 2.0
===============================================================================